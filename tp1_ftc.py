# -*- coding: utf-8 -*-
"""tp1-ftc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jp_zNpoofA_tRY76MzebGHmuXK4Dne0X
"""

#line = input()
#line = 'x,x1,x1a,x1ab'
line = 'x,x1'

estados = line.split(sep=',')
print(estados)

#line = input()
line = '0,1'

simb = line.split(sep=',')
simb

#line = input()
line = 'x'

iniciais = line.split(sep=',')
iniciais

#line = input()
#line = 'x1ab'
line = 'x1'

finais = line.split(sep=',')
finais

tran = {}
for est in estados:
  tran[est] = {}
  for est2 in estados:
    tran[est][est2] = []
tran

"""line = input()
while(line != ''):
  val = line.split(sep=',')
  for i in range(2, len(val)):
    tran[val[0]][val[i]].append(val[1])
  line = input()

inps = ['p0,a,i0',
'p0,b,i1',
'i0,a,p0',
'i0,b,p1',
'p1,a,i1',
'i1,a,p1']
"""

"""inps = ['x,0,x',
'x,1,x,x1',
'x1,0,x1a',
'x1,1,x1a',
'x1a,0,x1ab',
'x1a,1,x1ab']"""
inps = ['x,0,x1','x1,0,x1','x1,1,x1,x']
for line in inps:
  val = line.split(sep=',')
  for i in range(2, len(val)):
    tran[val[0]][val[i]].append(val[1])

print(estados)
tran

for est in estados:
  for est2 in estados:
    if (len(tran[est][est2])==0):
      tran[est].pop(est2)
tran

exp = ''
if (len(iniciais) == 1):
  for est1 in estados:
    linha_est1 = ''
    for est2 in tran[est1].keys():
      if (est1 == est2):
        if (len(tran[est1][est2]) > 1):
          linha_est1 += '('
          for i in range(len(tran[est1][est2])):
            if i < len(tran[est1][est2]) - 1:
              linha_est1 += tran[est1][est2][i] + ','
            else:
              linha_est1 += tran[est1][est2][i] + ')*'
        else:
          linha_est1 += tran[est1][est2][0] + '*'
      else:
        if (est1 not in tran[est2].keys()):
          linha_est1 += '('
          for i in range(len(tran[est1][est2])):
            if i < len(tran[est1][est2]) - 1:
              linha_est1 += tran[est1][est2][i] + ' + '
            else:
              linha_est1 += tran[est1][est2][i] + ')'
        else:
          linha_est2 = '(('
          for i in range(len(tran[est1][est2])):
            if i < len(tran[est1][est2]) - 1:
              linha_est2 += tran[est1][est2][i] + ' + '
            else:
              linha_est2 += tran[est1][est2][i] + ')'
          linha_est1 += linha_est2

          if (est2 in tran[est2].keys()):
            linha_est1 += '('
            for i in range(len(tran[est2][est2])):
              if i < len(tran[est2][est2]) - 1:
                linha_est1 += tran[est2][est2][i] + ','
              else:
                linha_est1 += tran[est2][est2][i] + ')*'
            tran[est2].pop(est2)
          
          linha_est1 += '('
          for i in range(len(tran[est2][est1])):
            if i < len(tran[est2][est1]) - 1:
              linha_est1 += tran[est2][est1][i] + ' + '
            else:
              linha_est1 += tran[est2][est1][i] + ')'
          linha_est1 += ')*'
          
          if (est2 in finais or len(tran[est2].keys()) > 0):
            linha_est1 += linha_est2
  exp += linha_est1
"""else:
  counter = 0
  for inicial in iniciais:
    exp += '('
    states = []
    states.append(inicial)

    for est in tran[inicial].keys():
        if est not in states:
          states.append(est)

    for est1 in states:
      linha_est1 = ''
      for est2 in tran[est1].keys():

    exp += ')'
    if (counter < len(iniciais) - 1):
      exp += ' + '
    counter += 1
  """

"""if(len(tran[est][est2]) > 0):
        exp += '('
        for i in range(len(tran[est][est2])):
          if i < len(tran[est][est]) - 1:
            exp += tran[est][est][i] + ','
          else:
            exp += tran[est][est][i]
        exp += ')*'"""

print(exp)

